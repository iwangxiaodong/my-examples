#   kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/galley/testdata/conversion/dataset/networking.istio.io/v1alpha3/gateway.yaml -n example
#   kubectl apply -f https://github.com/iwangxiaodong/my-examples/blob/master/k8s/all/istio-demo/istio-subset-example.yaml -n example
#   启用mtls后，DestinationRule需要增加trafficPolicy为ISTIO_MUTUAL模式
#   kubectl exec $(kubectl get pod -l app=sleep -n example -o jsonpath={.items..metadata.name}) -c sleep -n example -- curl -HHost:domain.test http://10.0.22.11
#   VirtualService的hosts最好用真实域名，避免跟FQDN短名称冲突
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: example
spec:
  hosts:
  - domain.test
  gateways:
  - helloworld-gateway
  http:
  - route:
    - destination:
        host: example
        subset: v1
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: example
spec:
  host: example
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
apiVersion: v1
kind: Service
metadata:
  name: example
  labels:
    app: example
spec:
  selector:
    app: example
  ports:
  - name: http
    port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-v1
  labels:
    app: example
    version: v1
spec:
  selector:
    matchLabels:
      app: example
      version: v1
  replicas: 1
  template:
    metadata:
      labels:
        app: example
        version: v1
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 0
            memory: 0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-v2
  labels:
    app: example
    version: v2
spec:
  selector:
    matchLabels:
      app: example
      version: v2
  replicas: 1
  template:
    metadata:
      labels:
        app: example
        version: v2
    spec:
      containers:
      - name: httpd
        image: httpd
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 0
            memory: 0
